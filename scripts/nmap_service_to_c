-- open the file "nmap-services" and read it line by line
-- for each line, extract the name and port number and write it to a file
-- the file will be used to create a table in C

-- open the file
local file = io.open("nmap_services", "r")

-- open the output file
local output = io.open("nmap_services.h", "w")

-- write the header
output:write("#pragma once\n\n")
output:write("/*\n")
output:write(" * nmap_services.h\n")
output:write(" *\n")
output:write(" * This file was generated by nmap_services_to_c.lua\n")
output:write(" */\n\n")

-- write the table
output:write("struct service {\n")
output:write("    int port;\n")
output:write("    char *name;\n")
output:write("};\n\n")

-- read the file line by line
local amount
function processFile(file, protocol)
    if protocol == "tcp" then
        output:write("struct service services_tcp[] = {\n")
    elseif protocol == "udp" then
        output:write("struct service services_udp[] = {\n")
    end

    -- reset the amount
    amount = 0

    for line in file:lines() do
        -- ignore comments
        if string.sub(line, 1, 1) ~= "#" then
            -- extract the name
            local name = string.match(line, "([%w-]+)")

            -- ignore unknown
            if name == "unknown" then
                goto continue
            end

            -- extract the port based on protocol (tcp or udp)
            local port = string.match(line, "%s(%d+)/" .. protocol)

            -- ignore if no port
            if port == nil then
                goto continue
            end

            -- write the line
            output:write("    {" .. port .. ", \"" .. name .. "\"},\n")
            amount = amount + 1
            ::continue::
        end
    end

    -- write the footer
    output:write("};\n")

    -- write the amount
    output:write("int amount_" .. protocol .. " = " .. amount .. ";\n\n")
end

processFile(file, "tcp")
file:close()
file = io.open("nmap_services", "r")
processFile(file, "udp")

-- close the files
file:close()
output:close()